{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ember-platforma/tests/adapters/application.jshint.js","ember-platforma/tests/app.jshint.js","ember-platforma/tests/helpers/destroy-app.js","ember-platforma/tests/helpers/destroy-app.jshint.js","ember-platforma/tests/helpers/module-for-acceptance.js","ember-platforma/tests/helpers/module-for-acceptance.jshint.js","ember-platforma/tests/helpers/resolver.js","ember-platforma/tests/helpers/resolver.jshint.js","ember-platforma/tests/helpers/start-app.js","ember-platforma/tests/helpers/start-app.jshint.js","ember-platforma/tests/initializers/trigger-resize-window.jshint.js","ember-platforma/tests/instance-initializers/injecting-routing.jshint.js","ember-platforma/tests/instance-initializers/push-records.jshint.js","ember-platforma/tests/integration/pods/components/system/simple-footer/component-test.js","ember-platforma/tests/integration/pods/components/system/simple-footer/component-test.jshint.js","ember-platforma/tests/integration/pods/components/system/simple-header/component-test.js","ember-platforma/tests/integration/pods/components/system/simple-header/component-test.jshint.js","ember-platforma/tests/integration/pods/components/system/simple-sidebar-control/component-test.js","ember-platforma/tests/integration/pods/components/system/simple-sidebar-control/component-test.jshint.js","ember-platforma/tests/integration/pods/components/system/simple-sidebar/component-test.js","ember-platforma/tests/integration/pods/components/system/simple-sidebar/component-test.jshint.js","ember-platforma/tests/integration/pods/components/table/cell/system-column/component-test.js","ember-platforma/tests/integration/pods/components/table/cell/system-column/component-test.jshint.js","ember-platforma/tests/integration/pods/components/wrap-modal/component-test.js","ember-platforma/tests/integration/pods/components/wrap-modal/component-test.jshint.js","ember-platforma/tests/lib/columns-definition/rates-exchanges.jshint.js","ember-platforma/tests/lib/data/currency-type.jshint.js","ember-platforma/tests/lib/data/eur.jshint.js","ember-platforma/tests/lib/data/usd.jshint.js","ember-platforma/tests/models/currency-type.jshint.js","ember-platforma/tests/models/rates-exchange.jshint.js","ember-platforma/tests/pods/application/controller.jshint.js","ember-platforma/tests/pods/application/route.jshint.js","ember-platforma/tests/pods/components/system/simple-footer/component.jshint.js","ember-platforma/tests/pods/components/system/simple-header/component.jshint.js","ember-platforma/tests/pods/components/system/simple-sidebar-control/component.jshint.js","ember-platforma/tests/pods/components/system/simple-sidebar/component.jshint.js","ember-platforma/tests/pods/components/table/cell/system-column/component.jshint.js","ember-platforma/tests/pods/components/wrap-modal/component.jshint.js","ember-platforma/tests/pods/exchanges/controller.jshint.js","ember-platforma/tests/pods/exchanges/route.jshint.js","ember-platforma/tests/resolver.jshint.js","ember-platforma/tests/router.jshint.js","ember-platforma/tests/services/waiting-destroy-data.jshint.js","ember-platforma/tests/test-helper.js","ember-platforma/tests/test-helper.jshint.js","ember-platforma/tests/unit/adapters/application-test.js","ember-platforma/tests/unit/adapters/application-test.jshint.js","ember-platforma/tests/unit/initializers/trigger-resize-window-test.js","ember-platforma/tests/unit/initializers/trigger-resize-window-test.jshint.js","ember-platforma/tests/unit/instance-initializers/injecting-routing-test.js","ember-platforma/tests/unit/instance-initializers/injecting-routing-test.jshint.js","ember-platforma/tests/unit/instance-initializers/push-records-test.js","ember-platforma/tests/unit/instance-initializers/push-records-test.jshint.js","ember-platforma/tests/unit/models/currency-type-test.js","ember-platforma/tests/unit/models/currency-type-test.jshint.js","ember-platforma/tests/unit/models/rates-exchange-test.js","ember-platforma/tests/unit/models/rates-exchange-test.jshint.js","ember-platforma/tests/unit/pods/application/controller-test.js","ember-platforma/tests/unit/pods/application/controller-test.jshint.js","ember-platforma/tests/unit/pods/application/route-test.js","ember-platforma/tests/unit/pods/application/route-test.jshint.js","ember-platforma/tests/unit/pods/exchanges/controller-test.js","ember-platforma/tests/unit/pods/exchanges/controller-test.jshint.js","ember-platforma/tests/unit/pods/exchanges/route-test.js","ember-platforma/tests/unit/pods/exchanges/route-test.jshint.js","ember-platforma/tests/unit/services/waiting-destoroy-data-test.js","ember-platforma/tests/unit/services/waiting-destoroy-data-test.jshint.js","ember-platforma/tests/unit/services/waiting-destroy-data-test.js","ember-platforma/tests/unit/services/waiting-destroy-data-test.jshint.js","ember-platforma/tests/unit/services/wating-destroy-data-test.js","ember-platforma/tests/unit/services/wating-destroy-data-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('ember-platforma/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('ember-platforma/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'ember-platforma/tests/helpers/start-app', 'ember-platforma/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _emberPlatformaTestsHelpersStartApp, _emberPlatformaTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _emberPlatformaTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _emberPlatformaTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('ember-platforma/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/helpers/resolver', ['exports', 'ember-platforma/resolver', 'ember-platforma/config/environment'], function (exports, _emberPlatformaResolver, _emberPlatformaConfigEnvironment) {\n\n  var resolver = _emberPlatformaResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _emberPlatformaConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _emberPlatformaConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('ember-platforma/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/helpers/start-app', ['exports', 'ember', 'ember-platforma/app', 'ember-platforma/config/environment'], function (exports, _ember, _emberPlatformaApp, _emberPlatformaConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _emberPlatformaConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _emberPlatformaApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('ember-platforma/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/initializers/trigger-resize-window.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/trigger-resize-window.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'initializers/trigger-resize-window.js should pass jshint.\\ninitializers/trigger-resize-window.js: line 5, col 5, \\'$\\' is not defined.\\n\\n1 error');\n  });\n});","define('ember-platforma/tests/instance-initializers/injecting-routing.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | instance-initializers/injecting-routing.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/injecting-routing.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/instance-initializers/push-records.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | instance-initializers/push-records.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'instance-initializers/push-records.js should pass jshint.\\ninstance-initializers/push-records.js: line 59, col 26, \\'results\\' is defined but never used.\\ninstance-initializers/push-records.js: line 7, col 7, \\'LIMIT\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('ember-platforma/tests/integration/pods/components/system/simple-footer/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('system/simple-footer', 'Integration | Component | system/simple footer', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.9.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'system/simple-footer', ['loc', [null, [1, 0], [1, 24]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.9.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.9.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'system/simple-footer', [], [], 0, null, ['loc', [null, [2, 4], [4, 29]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-platforma/tests/integration/pods/components/system/simple-footer/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/system/simple-footer/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/system/simple-footer/component-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/integration/pods/components/system/simple-header/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('system/simple-header', 'Integration | Component | system/simple header', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.9.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'system/simple-header', ['loc', [null, [1, 0], [1, 24]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.9.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.9.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'system/simple-header', [], [], 0, null, ['loc', [null, [2, 4], [4, 29]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-platforma/tests/integration/pods/components/system/simple-header/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/system/simple-header/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/system/simple-header/component-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/integration/pods/components/system/simple-sidebar-control/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('system/simple-sidebar-control', 'Integration | Component | system/simple sidebar control', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.9.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 33\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'system/simple-sidebar-control', ['loc', [null, [1, 0], [1, 33]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.9.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.9.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'system/simple-sidebar-control', [], [], 0, null, ['loc', [null, [2, 4], [4, 38]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-platforma/tests/integration/pods/components/system/simple-sidebar-control/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/system/simple-sidebar-control/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/system/simple-sidebar-control/component-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/integration/pods/components/system/simple-sidebar/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('system/simple-sidebar', 'Integration | Component | system/simple sidebar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.9.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 25\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'system/simple-sidebar', ['loc', [null, [1, 0], [1, 25]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.9.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.9.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'system/simple-sidebar', [], [], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-platforma/tests/integration/pods/components/system/simple-sidebar/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/system/simple-sidebar/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/system/simple-sidebar/component-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/integration/pods/components/table/cell/system-column/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('table/cell/system-column', 'Integration | Component | table/cell/system column', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.9.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 28\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'table/cell/system-column', ['loc', [null, [1, 0], [1, 28]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.9.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.9.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'table/cell/system-column', [], [], 0, null, ['loc', [null, [2, 4], [4, 33]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-platforma/tests/integration/pods/components/table/cell/system-column/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/table/cell/system-column/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/table/cell/system-column/component-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/integration/pods/components/wrap-modal/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('wrap-modal', 'Integration | Component | wrap modal', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.9.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 14\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'wrap-modal', ['loc', [null, [1, 0], [1, 14]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.9.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.9.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'wrap-modal', [], [], 0, null, ['loc', [null, [2, 4], [4, 19]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-platforma/tests/integration/pods/components/wrap-modal/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/wrap-modal/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/wrap-modal/component-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/lib/columns-definition/rates-exchanges.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | lib/columns-definition/rates-exchanges.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'lib/columns-definition/rates-exchanges.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/lib/data/currency-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | lib/data/currency-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'lib/data/currency-type.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/lib/data/eur.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | lib/data/eur.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'lib/data/eur.js should pass jshint.\\nlib/data/eur.js: line 1468, col 2, Missing semicolon.\\n\\n1 error');\n  });\n});","define('ember-platforma/tests/lib/data/usd.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | lib/data/usd.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'lib/data/usd.js should pass jshint.\\nlib/data/usd.js: line 1468, col 2, Missing semicolon.\\n\\n1 error');\n  });\n});","define('ember-platforma/tests/models/currency-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/currency-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/currency-type.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/models/rates-exchange.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/rates-exchange.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/rates-exchange.js should pass jshint.\\nmodels/rates-exchange.js: line 11, col 18, \\'Ember\\' is not defined.\\n\\n1 error');\n  });\n});","define('ember-platforma/tests/pods/application/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/application/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/controller.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/pods/application/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/application/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/route.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/pods/components/system/simple-footer/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/system/simple-footer/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/system/simple-footer/component.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/pods/components/system/simple-header/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/system/simple-header/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/system/simple-header/component.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/pods/components/system/simple-sidebar-control/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/system/simple-sidebar-control/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/system/simple-sidebar-control/component.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/pods/components/system/simple-sidebar/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/system/simple-sidebar/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/system/simple-sidebar/component.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/pods/components/table/cell/system-column/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/table/cell/system-column/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/table/cell/system-column/component.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/pods/components/wrap-modal/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/wrap-modal/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/components/wrap-modal/component.js should pass jshint.\\npods/components/wrap-modal/component.js: line 15, col 17, \\'e\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('ember-platforma/tests/pods/exchanges/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/exchanges/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/exchanges/controller.js should pass jshint.\\npods/exchanges/controller.js: line 3, col 87, Missing semicolon.\\npods/exchanges/controller.js: line 25, col 25, Missing semicolon.\\npods/exchanges/controller.js: line 23, col 11, \\'lengthData\\' is defined but never used.\\n\\n3 errors');\n  });\n});","define('ember-platforma/tests/pods/exchanges/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/exchanges/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/exchanges/route.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/services/waiting-destroy-data.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/waiting-destroy-data.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/waiting-destroy-data.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/test-helper', ['exports', 'ember-platforma/tests/helpers/resolver', 'ember-qunit'], function (exports, _emberPlatformaTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_emberPlatformaTestsHelpersResolver['default']);\n});","define('ember-platforma/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('ember-platforma/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/unit/initializers/trigger-resize-window-test', ['exports', 'ember', 'ember-platforma/initializers/trigger-resize-window', 'qunit'], function (exports, _ember, _emberPlatformaInitializersTriggerResizeWindow, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | trigger resize window', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _emberPlatformaInitializersTriggerResizeWindow['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('ember-platforma/tests/unit/initializers/trigger-resize-window-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/trigger-resize-window-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/trigger-resize-window-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/unit/instance-initializers/injecting-routing-test', ['exports', 'ember', 'ember-platforma/instance-initializers/injecting-routing', 'qunit', 'ember-platforma/tests/helpers/destroy-app'], function (exports, _ember, _emberPlatformaInstanceInitializersInjectingRouting, _qunit, _emberPlatformaTestsHelpersDestroyApp) {\n\n  (0, _qunit.module)('Unit | Instance Initializer | injecting routing', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      _ember['default'].run(function () {\n        _this.application = _ember['default'].Application.create();\n        _this.appInstance = _this.application.buildInstance();\n      });\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(this.appInstance, 'destroy');\n      (0, _emberPlatformaTestsHelpersDestroyApp['default'])(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _emberPlatformaInstanceInitializersInjectingRouting.initialize)(this.appInstance);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('ember-platforma/tests/unit/instance-initializers/injecting-routing-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/instance-initializers/injecting-routing-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/injecting-routing-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/unit/instance-initializers/push-records-test', ['exports', 'ember', 'ember-platforma/instance-initializers/push-records', 'qunit', 'ember-platforma/tests/helpers/destroy-app'], function (exports, _ember, _emberPlatformaInstanceInitializersPushRecords, _qunit, _emberPlatformaTestsHelpersDestroyApp) {\n\n  (0, _qunit.module)('Unit | Instance Initializer | push records', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      _ember['default'].run(function () {\n        _this.application = _ember['default'].Application.create();\n        _this.appInstance = _this.application.buildInstance();\n      });\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(this.appInstance, 'destroy');\n      (0, _emberPlatformaTestsHelpersDestroyApp['default'])(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _emberPlatformaInstanceInitializersPushRecords.initialize)(this.appInstance);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('ember-platforma/tests/unit/instance-initializers/push-records-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/instance-initializers/push-records-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/push-records-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/unit/models/currency-type-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('currency-type', 'Unit | Model | currency type', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ember-platforma/tests/unit/models/currency-type-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/currency-type-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/currency-type-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/unit/models/rates-exchange-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('rates-exchange', 'Unit | Model | rates exchange', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ember-platforma/tests/unit/models/rates-exchange-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/rates-exchange-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/rates-exchange-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/unit/pods/application/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ember-platforma/tests/unit/pods/application/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/application/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/application/controller-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/unit/pods/application/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-platforma/tests/unit/pods/application/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/application/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/application/route-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/unit/pods/exchanges/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:exchanges', 'Unit | Controller | exchanges', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ember-platforma/tests/unit/pods/exchanges/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/exchanges/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/exchanges/controller-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/unit/pods/exchanges/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:exchanges', 'Unit | Route | exchanges', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-platforma/tests/unit/pods/exchanges/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/exchanges/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/exchanges/route-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/unit/services/waiting-destoroy-data-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:waiting-destoroy-data', 'Unit | Service | waiting destoroy data', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('ember-platforma/tests/unit/services/waiting-destoroy-data-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/waiting-destoroy-data-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/waiting-destoroy-data-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/unit/services/waiting-destroy-data-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:waiting-destroy-data', 'Unit | Service | waiting destroy data', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('ember-platforma/tests/unit/services/waiting-destroy-data-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/waiting-destroy-data-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/waiting-destroy-data-test.js should pass jshint.');\n  });\n});","define('ember-platforma/tests/unit/services/wating-destroy-data-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:wating-destroy-data', 'Unit | Service | wating destroy data', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('ember-platforma/tests/unit/services/wating-destroy-data-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/wating-destroy-data-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/wating-destroy-data-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('ember-platforma/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjjllnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}